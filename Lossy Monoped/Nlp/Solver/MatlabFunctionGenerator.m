%MATLABFUNCTIONGENERATOR MATLAB function generation object.
%
% Copyright 2013-2015 Mikhail S. Jones

classdef  MatlabFunctionGenerator < FunctionGenerator

  % PUBLIC METHODS ========================================================
  methods
    function obj = MatlabFunctionGenerator(argsIn, argsOut, path, name)
    %MATLABFUNCTIONGENERATOR MATLAB function generation object constructor.

      % Call superclass constructor
      obj = obj@FunctionGenerator(argsIn, argsOut, path, name);
    end % FunctionGenerator

    function writeHeader(obj)
    %WRITEHEADER Create file and write function header.

      % Open new file to write without automatic flushing (W vs w)
      obj.fid = fopen(fullfile(obj.path, [obj.name '.m']), 'W');

      % Create argument strings
      out = sprintf('%s,', obj.argsOut{:});
      out = out(1:end-1);
      in = sprintf('%s,', obj.argsIn{:});
      in = in(1:end-1);

      % Write file header
      fprintf(obj.fid, 'function [%s] = %s(%s)\n', out, obj.name, in);
      fprintf(obj.fid, '%%%s\n', upper(obj.name));
      fprintf(obj.fid, '%%\n');
      fprintf(obj.fid, '%% Auto-generated by COALESCE package (%s)\n', ...
        datestr(now));
      fprintf(obj.fid, '%%\n');
      fprintf(obj.fid, '%% Copyright 2013-2015 Mikhail S. Jones\n');
      fprintf(obj.fid, '\n');
    end % writeHeader

    function writeIndex(obj, index, name)
    %WRITEINDEX Write vectorized index.

      % Initialize string
      str = '';

      % Loop through each cell of array
      for i = 1:numel(index)
        % Check for scalar indexes
        if numel(index{i}) == 1
          % Write as scalar index
          str = [str sprintf('%g,', index{i})];

        % Check for repeating indexes
        elseif all(diff(index{i}) == 0)
          % Write as vectorized index
          str = [str sprintf('%g+zeros(1,%d),', index{i}(1), numel(index{i}))];
          % Note: scalar + zeros(m,n) is the fastest way to do this without
          % using an intermediate step, much faster than ones and a
          % little faster than repmat

        % Check for monotonically increasing indexes
        elseif all(diff(diff(index{i})) == 0)
          % Write as vectorized index
          str = [str sprintf('%g:%g:%g,', index{i}(1), index{i}(2) - index{i}(1), index{i}(end))];

        else
          % Write as full index
          str = [str sprintf('%g,', index{i})];
        end % if
      end % for

      % Write to file
      fprintf(obj.fid, '\t%s = [%s]'';\n', name, str(1:end-1));
    end % writeIndex

    function writeExpression(obj, expression, name)
    %WRITEEXPRESSION Write vectorized symbolic expression.

      matlabCode(expression, name, obj.fid); % TODO: Move function here
    end % writeExpression

    function writeFooter(obj)
    %WRITEFOOTER Create file and write function footer.

      % Write function end and close file
      fprintf(obj.fid, 'end %% %s', obj.name);
      fclose(obj.fid);
    end % writeHeader
  end % methods
end % classdef
